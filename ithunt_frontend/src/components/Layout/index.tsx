import React, {
  PropsWithChildren,
  ReactElement,
  ReactNode,
  useMemo,
} from "react";
import type { MenuProps } from "antd";
import { Layout as Antdlayout, Menu, Dropdown, Space, message } from "antd";
import styles from "./index.module.css";
import { useRouter } from "next/router";
import {
  DownOutlined,
  CaretDownOutlined,
  PieChartOutlined,
  DesktopOutlined,
  TeamOutlined,
  ToolOutlined,
  ReadOutlined,
} from "@ant-design/icons";
import Head from "next/head";
import Link from "next/link";
import { userLogout } from "@/api";
import { useSelector } from "react-redux";
import { RootState } from "@/store/modules";
import { USER_ROLE } from "@/constants";
import { useCurrentUser } from "@/utils/hoos";

const { Header, Content, Sider } = Antdlayout;

const ITEMS = [
  {
    key: "/dashboard",
    label: "Dashboard",
    icon: <PieChartOutlined />,
    role: USER_ROLE.STU,
  },
  {
    key: "glossary",
    label: "Glossary",
    icon: <ReadOutlined />,
    role: USER_ROLE.STU,

    children: [
      {
        key: "/glossary",
        label: "Glossary",
        role: USER_ROLE.STU,
      },
      { key: "/glossary/list", label: "Glossary List", role: USER_ROLE.ADMIN },
    ],
  },
  {
    key: "course",
    label: "Learning in MSC IT+",
    icon: <DesktopOutlined />,
    role: USER_ROLE.STU,

    children: [
      {
        key: "/course",
        label: "Course",
        role: USER_ROLE.STU,
      },
      { key: "/course/list", label: "Course List", role: USER_ROLE.ADMIN },
      {
        key: "/course/feedback",
        label: "Course Feedback",
        role: USER_ROLE.ADMIN,
      },
    ],
  },
  {
    key: "selflearning",
    label: "Self-learning Hub",
    icon: <DesktopOutlined />,
    role: USER_ROLE.STU,

    children: [
      {
        key: "/selflearning",
        label: "Course",
        role: USER_ROLE.STU,
      },
      {
        key: "/selflearning/quiz",
        label: "Quiz",
        role: USER_ROLE.STU,
      },
      {
        key: "/selflearning/courselist",
        label: "Course List",
        role: USER_ROLE.ADMIN,
      },
      {
        key: "/selflearning/questionlist",
        label: "Questions List",
        role: USER_ROLE.ADMIN,
      },
    ],
  },
  {
    key: "/englishsupport",
    label: "English Support",
    icon: <ToolOutlined />,
    role: USER_ROLE.STU,
  },
  {
    key: "/postgraduatesupport",
    label: "Postgraduate-level Support",
    icon: <ToolOutlined />,
    role: USER_ROLE.STU,
  },
  {
    key: "/users",
    label: "Users",
    icon: <TeamOutlined />,
    role: USER_ROLE.ADMIN,
  },
];

const USER_ITEMS: MenuProps["items"] = [
  {
    label: "Notification",
    key: "/dashboard/notification",
  },
  {
    label: "Log out",
    key: "/login",
  },
];

const Layout: React.FC<PropsWithChildren> = ({ children }) => {
  const userRole = useSelector((state: RootState) => state.user.role);
  const userName = useSelector((state: RootState) => state.user.username);
  console.log("user name:", userName);
  const router = useRouter();
  //const user = useCurrentUser();
  console.log("user:", userRole);

  const activeMenu = router.pathname;
  const defaultOpenKeys = [activeMenu.split("/")[1]];

  const USER_ITEMS: MenuProps["items"] = [
    {
      label: <Link href="/dashboard/notification">Notification</Link>,
      key: "/dashboard/notification",
    },
    {
      label: (
        <span
          onClick={async () => {
            await userLogout();
            message.success("Log out successfully");
            router.push("/login");
          }}
        >
          Log out
        </span>
      ),
      key: "login",
    },
  ];
  /*const items = useMemo(() => {
    if (userRole === USER_ROLE.STU) {
      return ITEMS.filter((item) => {
        if (item.children) {
          item.children = item.children.filter((k) => k.role === USER_ROLE.STU);
        }
        return item.role === USER_ROLE.STU;
      });
    } else {
      return ITEMS;
    }
  }, [userRole]);*/
  const filteredItems = useMemo(() => {
    // 先根据用户角色过滤顶级菜单项
    const topLevelItems = ITEMS.filter((item) => item.role === userRole);

    // 遍历顶级菜单项，进一步过滤子菜单项
    topLevelItems.forEach((item) => {
      if (item.children) {
        item.children = item.children.filter(
          (child) => child.role === userRole
        );
      }
    });

    return topLevelItems;
  }, [userRole]);

  console.log("menu items:", filteredItems);

  const handleMenuClick: MenuProps["onClick"] = ({ key }) => {
    router.push(key);
  };

  const onClick: MenuProps["onClick"] = ({ key }) => {
    //message.info(`Click on item ${key}`);
    router.push(key);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Antdlayout>
          <Header className={styles.header}>
            ITHunt
            <span className={styles.user}>
              <Dropdown menu={{ items: USER_ITEMS, onClick }}>
                <a onClick={(e) => e.preventDefault()}>
                  <Space>
                    Welcome back
                    <span className={styles.userName}>{userName}</span>
                    <CaretDownOutlined />
                  </Space>
                </a>
              </Dropdown>
            </span>
          </Header>
          <Antdlayout className={styles.sectionInner}>
            <Sider width={280}>
              <Menu
                mode="inline"
                defaultOpenKeys={defaultOpenKeys}
                selectedKeys={[activeMenu]}
                style={{ height: "100%", borderRight: 0 }}
                items={filteredItems}
                onClick={handleMenuClick}
                className={styles.menu}
              />
            </Sider>
            <Antdlayout className={styles.sectionContent}>
              {router.pathname !== "/dashboard" ? (
                <Content className={styles.content}>{children}</Content>
              ) : (
                <Content>{children}</Content>
              )}
            </Antdlayout>
          </Antdlayout>
        </Antdlayout>
      </main>
    </>
  );
};
export default Layout;
